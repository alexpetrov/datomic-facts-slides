#+STARTUP: showall

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_slide_number:c/t
#+OPTIONS: toc:0
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Факты про Datomic.">
#+REVEAL_POSTAMBLE: <p> Created by Alexander Petrov (a.k.a Lysenko). </p>
#+REVEAL_PLUGINS: (markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css

* Факты Про Datomic

* О себе

* Модель данных

#+BEGIN_NOTES
На этом слайде нужно рассказать про модель данных фактоориентированную
#+END_NOTES

* Иммутабельность

#+BEGIN_NOTES
Здесь нужно рассказать, что такая модель данных делает данные иммутабельными как при работе с данными на бумаге
#+END_NOTES

* Simple Architecture

#+BEGIN_NOTES
А иммутабельность позволяет радикально упростить архитекутру работы с данными
Здесь нужно нарисовать архитекуру Datomic с помощью псевдо графики
#+END_NOTES

* Декларативный язык запросов Datalog

#+BEGIN_NOTES
1977 году создали подходящий язык для построения запросов к datom-ам - Datalog
#+END_NOTES

* Супервозможности

#+BEGIN_NOTES
Здесь нужно рассказать про выполнение аналитических запросов относительно консистентного значения всей БД в любой момент времени
и возможность строить спекулятивные запросы
#+END_NOTES

* Ортогональность идей Datalog и факториентированной модели данных

Datalog может быть применён для обработки любых структурированных данных.
Но в частности в Datomic используется для обработки Datom-ов.

#+BEGIN_NOTES
В конце сказать, что если не нужна история а нужен Datalog для удобных декларативных запросов к данным, то можно воспользоваться OpenSource-ным DataScript
Это могут быть статически генерируемые сайты, или хранение состояния SPA-приложения.
#+END_NOTES

* Почему хранение всей истории изменений оправдано

#+BEGIN_NOTES
На закуску оставить детали реализации и почему это сегодня можно использовать в продакшне не смотря на кажущуюся "Дороговизну" хранения горячего набора данных в памяти.
Можно привести примерные цифры Capacity Planning для разных кусков БД.
И сравнить с использованием проприетарной OLTP БД, ETL платформы и OLAP БД.
Высказать гипотезу, что за счёт многоуровнвого сжатия индексов в Datomic те же данные, возмножно будут занимать меньше места чем в OLAP базе с историческими данными.
#+END_NOTES

* Источники incidental complexity

- Сохранение данных
- ETL из OLTP в OLAP
- Толстый (Stateful) клиент

#+BEGIN_NOTES
- Сохранение данных
Datomic убирает impedance mismatch
- ETL для обеспечения аналитической обработки
Datomic избаляет от необходимости вообще иметь ETL, потому что оба типа запросов делаются к одним и тем же данным
- Толстый (Stateful) клиент
Лучше вообще избегать, но если не удаётся, то и тут Datomic спасает. Можно стейт складывать в локальную In Memory database  DataScript,
а данные для него получать с помощью слушания лога всех изменений через REST API

За то мы избавимся от целого вороха incidental complexity традиционных подходов к построению систем.
Добавить слайд про поставщиков incidental complexity в бизнес приложениях.
#+END_NOTES

* Поддержка Datomic в не Clojure языках

* Обучающие материалы

* Благодарности
