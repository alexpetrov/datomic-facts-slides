#+STARTUP: showall

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_slide_number:c/t
#+OPTIONS: toc:0
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Факты про Datomic.">
#+REVEAL_POSTAMBLE: <p> Created by Alexander Petrov (a.k.a Lysenko). </p>
#+REVEAL_PLUGINS: (markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css

* /Факты/ про *Datomic*

Presentation For [[https://www.meetup.com/Moscow-Clojure-Script-Meetup/events/236838714/][Moscow Clojure/ClojureScript Meetup]]

by [[https://twitter.com/alexpetrov_rb][@alexpetrov_rb]]

25 February 2017

** /Факты/ про *Datomic*

#+ATTR_REVEAL: :frag roll-in
*Факт №1*

#+ATTR_REVEAL: :frag roll-in
*Datomic* про /Факты/

#+ATTR_REVEAL: :frag roll-in
"И это есть /Факт/, Мусьё Дюк!"

#+ATTR_REVEAL: :frag roll-in
(c) Господин Смирнов. "/Неуловимые Мстители. Корона Российской Империи/"

* About me

* Modeling

#+ATTR_REVEAL: :frag roll-in
  Что если моделировать /мир/ как набор /ситуаций/?

#+ATTR_REVEAL: :frag roll-in
  /Ситуация/ - это набор /фактов/ согласованных друг с другом в конкретный /момент времени/.

#+ATTR_REVEAL: :frag roll-in
  В рамках моделируемой части /мира/ нас не будет интересовать ничего за пределами /ситуаций/.

#+ATTR_REVEAL: :frag roll-in
  Мы сможем проигрывать /мир/ функциональным образом проходя через все /ситуации/ хвостовой рекурсией.

Из видео: [[https://www.youtube.com/watch?v=fhOHn9TClXY&feature=youtu.be&t=19m23s][Joe Armstrong Interviews Alan Kay]]

#+BEGIN_NOTES
Set of states in the world, that are consistent with each other at a particular time
#+END_NOTES

** History

The /Idea/ of simulating /Time/ along With /Process/ and /States/ appeared in the paper:

#+ATTR_REVEAL: :frag roll-in
    *1963* /Jonh McCarthy/ [[http://www.dtic.mil/dtic/tr/fulltext/u2/785031.pdf][Situations, Actions and Causal Laws]]

#+ATTR_REVEAL: :frag roll-in
    *2012* /Rich Hickey/ implemented the idea in [[http://www.datomic.com/][Datomic]] database

#+ATTR_REVEAL: :frag roll-in
    *2012 November* /Stuart Halloway/ implemented [[https://github.com/Datomic/simulant/wiki][Simulant]] library to [[https://www.infoq.com/presentations/Simulation-Testing][simulation test]] *Datomic* based systems

#+BEGIN_NOTES
Datomic реализует хранение ситуаций в виде транзакций, а Simulant проигрывает эти ситуации имитируя время с разной скоростью.
Это именно то о чём писал Джон МакКарти.
Всё это делается, чтобы иметь рандомизированные повторяемые black box тесты системы.
#+END_NOTES

** Example

#+ATTR_REVEAL: :frag roll-in
As of *1976* Great Guitar Player [[https://en.wikipedia.org/wiki/Robben_Ford][Robben Ford]] plays in /Yellowjackets/

#+ATTR_REVEAL: :frag roll-in
| Entity        | Attribute | Value             | Timestamp |
|---------------+-----------+-------------------+-----------|
| *Robben Ford* | Plays in  | "/Yellowjackets/" | *1976*    |

#+ATTR_REVEAL: :frag roll-in
Then as of *1986* he plays in /Miles Davis's Band/

#+ATTR_REVEAL: :frag roll-in
| Entity        | Attribute | Value                  | Timestamp |
|---------------+-----------+------------------------+-----------|
| *Robben Ford* | Plays in  | "/Miles Davis's Band/" | *1986*    |

#+BEGIN_NOTES
При этом вместе с ним в группе играли и другие музыканты и факты об этом истиннны в тот же момент времени.
#+END_NOTES

** Immutability

#+ATTR_REVEAL: :frag roll-in
Imagine [[https://en.wikipedia.org/wiki/General_ledger][General Ledger]]

#+ATTR_REVEAL: :frag roll-in
We save records on paper

#+ATTR_REVEAL: :frag roll-in
When situation changes we create *new* records

#+ATTR_REVEAL: :frag roll-in
We /NEVER/ /remove/ *old* records

#+ATTR_REVEAL: :frag roll-in
Lack of computer disc space made us use /Place/ oriented way of saving data

#+ATTR_REVEAL: :frag roll-in
Now these *space* *restrictions* are not relevant anymore

** *Facts* vs *Places*

*Places*

| Name | Street       |
| fred | "Spring St." |

** *Facts* vs *Places*

*Places*

| Name | Street         |
| fred | +"Spring St."+  |

#+ATTR_REVEAL: :frag roll-in
Now we've lost information about Fred ever lived on "Spring St."

** *Facts* vs *Places*

*Places*

| Name | Street      |
| fred | "Maple St." |

#+ATTR_REVEAL: :frag roll-in
*Facts*

#+ATTR_REVEAL: :frag roll-in
| *fred* | :street | "Spring St." | *T15* |

#+ATTR_REVEAL: :frag roll-in
*fred* moves to "Maple St."

#+ATTR_REVEAL: :frag roll-in
| *fred* | :street | "Maple St." | *T36* |

* /Simple/ Architecture

#+BEGIN_SRC
+----------------------------------------------------------------------------+
| +------------------------------------------------------------------------+ |
| |                        Peer Application Process                        | |
| +------------------------------------------------------------------------+ |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
|                                                                            |
| +------------------------------------------------------------------------+ |
| |                            Storage Service                             | |
| +------------------------------------------------------------------------+ |
+----------------------------------------------------------------------------+
#+END_SRC


#+BEGIN_NOTES
А иммутабельность позволяет радикально упростить архитекутру работы с данными
Здесь нужно нарисовать архитекуру Datomic с помощью псевдо графики
#+END_NOTES

* Declarative Logical Query Language /Datalog/

#+BEGIN_NOTES
1977 году создали подходящий язык для построения запросов к datom-ам - Datalog
#+END_NOTES

* Superpowers

#+BEGIN_NOTES
Здесь нужно рассказать про выполнение аналитических запросов относительно консистентного значения всей БД в любой момент времени
и возможность строить спекулятивные запросы
#+END_NOTES

* *Datalog* is /orthogonal/ to *facts* model

Datalog применим для обработки любых структурированных данных.
Но Datomic использует Datalog для обработки Datom-ов.

#+BEGIN_NOTES
В конце сказать, что если не нужна история а нужен Datalog для удобных декларативных запросов к данным, то можно воспользоваться OpenSource-ным DataScript
Это могут быть статически генерируемые сайты, или хранение состояния SPA-приложения.
#+END_NOTES

* /Incidental complexity/ sources

#+ATTR_REVEAL: :frag (appear)
   * Data /Persistence/
   * Cache Invalidation
   * *ETL* from *OLTP* to *OLAP*
   * Integration
   * *SPA* /Stateful/ Client
   * *DB* related /Concurrency/

** /Desease/ -> *Datomic* /Treatment/

#+ATTR_REVEAL: :frag roll-in
| Impedance Mismatch              | -> [[http://docs.datomic.com/pull.html][Pull API]]               |
| [[https://martinfowler.com/bliki/TwoHardThings.html][Cache Invalidation]]              | -> [[http://docs.datomic.com/architecture.html][Immutability]]           |
| /DB/ related /Concurrency/      | -> [[http://augustl.com/blog/2016/datomic_the_most_innovative_db_youve_never_heard_of][Single Threaded Writes]] |
| /ETL/ from /OLTP/ to /OLAP/     | -> [[http://docs.datomic.com/clojure/][as-of, since, history]]  |
| Integration ( [[https://martinfowler.com/articles/microservices.html]["Microservices"]] ) | -> [[http://docs.datomic.com/project-setup.html][Client]], [[http://docs.datomic.com/rest.html][REST]], [[https://github.com/cognitect-labs/vase][Vase]]     |
| /SPA/ Client /State Management/ | -> [[http://docs.datomic.com/rest.html][REST SSE]], [[https://github.com/tonsky/datascript][DataScript]]   |
| [[https://www.infoq.com/presentations/Simulation-Testing][Simulation Testing]]              | -> [[https://github.com/Datomic/simulant][Simulant]]               |

#+ATTR_REVEAL: :frag roll-in
/Datomic/ [[http://docs.datomic.com/rest.html][REST API]] works but considered legacy

#+BEGIN_NOTES
- Интеграция. Datomic REST API интеграция как с белым ящиком, в том числе реактивная
Vase позволяет строить RESTful API полностью декларативно для данных в Datomic Интеграция как с "чёрным" ящиком
https://github.com/cognitect-labs/vase
https://github.com/cognitect-labs/vase/blob/master/docs/your_first_api.md

-Concurrency. Multithreaded Databases тратят только 25% времени на запись и чтение данных. Остальное время они тратят на координацию паральных читателей и писателей.
SingleThreaded Transactor всё время тратит на запись данных. Нет проблем Concurrency вообще.
Он все приходящие на него транзакции кладёт в очередь и по одному вытаскивает и записывает.
Причём если приходит слишком много Datom-ов он переходит в Throttling режим и работает медленнее.

#+END_NOTES

* Why is it worth doing

#+BEGIN_NOTES
На закуску оставить детали реализации и почему это сегодня можно использовать в продакшне не смотря на кажущуюся "Дороговизну" хранения горячего набора данных в памяти.
Можно привести примерные цифры Capacity Planning для разных кусков БД.
И сравнить с использованием проприетарной OLTP БД, ETL платформы и OLAP БД.
Высказать гипотезу, что за счёт многоуровнвого сжатия индексов в Datomic те же данные, возмножно будут занимать меньше места чем в OLAP базе с историческими данными.
#+END_NOTES

* Datomic for non Clojure

* Summary

* Learning Datomic

* Acknowledgments

#+ATTR_REVEAL: :frag roll-in
*Николай Рыжиков* - за знакомство с /Datomic/ и /Clojure/ [[https://plus.google.com/u/0/+%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D0%B0%D0%B9%D0%A0%D1%8B%D0%B6%D0%B8%D0%BA%D0%BE%D0%B2/posts/br5A7HMEXY5][Осенью 2013]], знакомство с [[https://github.com/hakimel/reveal.js/][Reveal.js]] и название доклада

#+ATTR_REVEAL: :frag roll-in
*Никита Прокопов* - за преподавание на [[http://clojurecourse.by/][ClojureCource.by]] весной 2014 и /Open Source/ [[https://github.com/tonsky/datascript][DataScript]] и [[https://github.com/tonsky/rum][RUM]]

#+ATTR_REVEAL: :frag roll-in
*Сергей Ткаченко* - за [[https://www.meetup.com/Moscow-Clojure-Script-Meetup/][Moscow Clojure/ClojureScript Meetup]] и приглашение сделать доклад

#+ATTR_REVEAL: :frag roll-in
*Rich Hickey* - за [[https://clojure.org/][Clojure]] и [[http://www.datomic.com/][Datomic]]

#+ATTR_REVEAL: :frag roll-in
*Stuart Halloway* - За [[http://www.datomic.com/][Datomic]], [[https://github.com/Datomic/simulant][Simulant]] и мою первую прочитанную книгу по Clojure [[https://pragprog.com/book/shcloj2/programming-clojure][Programing Clojure]]

#+ATTR_REVEAL: :frag roll-in
[[https://www.gnu.org/software/emacs/][GNU Emacs]], [[http://orgmode.org/][Org Mode]], [[https://github.com/yjwen/org-reveal][Org-Reveal]], [[http://cinsk.github.io//emacs/emacs-artist.html][Artist Mode]], [[https://github.com/bbatsov/prelude][Prelude]]

* Links

[[http://blog.cognitect.com/cognicast/059-michael-nygard?rq=simulant][Cognicast Episode 059]] With *Michael Nygard* about /simulation testing/

[[http://blog.cognitect.com/cognicast/101?rq=arachne][Cognicast Episode 101]] With *Luke Vanderhart* about /Arachne/ web framework wich uses /Dataomic/ in memory database for components configuration

[[http://blog.cognitect.com/cognicast/118][Cognicast Episode 118]] with *Paul deGrandis* about /Vase/ data-driven /microservices/ library

* Questions and Additions
